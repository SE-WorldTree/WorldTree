World Tree
idea1：个人维护个人的树（网）

数据库：
	1.人物表（即每个人的图中所出现的人物），每个人物有独一的人物ID，记录该人物的简单信息，如姓名，出生日期
	等等。
	2.用户表，每个人有独一的用户ID；每个用户也有独一的人物ID与人物表中的某人对应。记录用户名，密码等信息。
	3.边集表，记录所有图中出现的所有边，每条边有独一的边ID，形式为from 人物ID1 to 人物ID2.
	4.许多个以用户ID（或人物ID）建立的表，记录这个用户自己的图中出现的边。


一些操作：
	1.每个人可以有创建导师、学生、导师的学生、导师的导师、学生的学生等等人物信息的操作。但是，即便是一个相
	同的人，出现在两张不同的图里时，他的信息也将由这两张图的作者分别定义，即他将拥有两个人物ID，作为两个人
	物存储在数据库中，视为两个不同的人。
	2.当一个用户在建立自己的学术师承树（网），进行增加人物操作时，根据他提供的信息可以在数据库里搜索，若发
	现另一个用户的信息与他想增加的人物的信息有较高相似度，便询问想增加的是否是这个人，如果是则将此人的信息
	连接到此处，不是则新增一个人物。但是选择“是”则日后不能再对他新增加的这个人的信息进行修改（可以修改关系，
	但是不能修改个人信息）。
	3.这种存储关系下，某人，设为x，很可能不是这个系统的用户，但是他的信息已经被其他的用户定义。比如y的学术
	师承树中出现了x，z的学术师承树中出现了x，但是x并不是这个系统的用户。若某天x在这个系统上注册了一个账号，
	则需对整个数据库进行搜索，搜索到用户y和用户z（因为他们的图里出现了在某些判定条件下判定为疑似x的人），
	在y和z下次登录时，对y和z进行提醒，该新增的x是否为他们图里的x，是否用该新x替换他们图里的x。
	4.用户可以和任意其他用户的树进行合并，合并的结果作为该用户的学术师承树替换该用户原来的树。合并操作的
	本质就是依据要合并的两个用户的图中是否有相同人物（相同的人物ID）把两个树（网）合为一个。
	5.由于以上讨论到的特性，所以有这样一件事，即，若某人不是该系统的用户，那么他在两张图里就是两个人，所以
	进行合并操作的时候并不能把他们识别为同一个人。
	
	Personal Information

ID(Primary) Name Birth email password used（节点）

Relation

ID(Primary) Papa son DateFrom DateTo Degree


注册、登录、新增节点、新增边、展示某一节点临近信息。

注册：
POST: 传姓名(user_name)，邮箱（email），密码(password)。 登录：
POST： 邮箱（email）、密码（password）。
新增节点：
POST: 传姓名(name)，邮箱（email），生日(birth)。
新增边：
Method*：
Param: name
Return: json list

Method2：
POST: papa_id1、son_id2、datefrom、dateto

展示某一节点临近信息：
Method*：